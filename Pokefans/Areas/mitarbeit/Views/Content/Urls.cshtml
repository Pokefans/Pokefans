@*Copyright 2015 the pokefans-core authors. See copying.md for legal info.*@
@using System.IdentityModel.Protocols.WSTrust
@using Pokefans.Areas.mitarbeit.Models
@using Pokefans.Data
@model ContentUrlsViewModel
@{
    SiteTitle = "Verwaltung: Inhalte - Url-Management";
    SiteDescription = "URL-Management";
    SiteHeader = Model.Content.Title;
    Layout = "~/Areas/mitarbeit/Views/_Layout.cshtml";

    Breadcrumbs.Add("Mitarbeit");
    Breadcrumbs.Add("Inhalte");
    Breadcrumbs.Add(Model.Content.Title);
    Breadcrumbs.Add("Urls");
}

<div class="row">
    <div class="col-xs-12">
        @if (!String.IsNullOrEmpty(ViewBag.Error))
        {
            <div class="alert alert-error alert-dismissable">@ViewBag.Error</div>
        }

        @if (Model.Saved)
        {
            <div class="alert alert-success alert-dismissable">URL hinzugefügt.</div>
        }

        <div class="box box-primary">
            <div class="box-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover vertical-center">
                        <tr>
                            @if (Model.IsContentAdministrator)
                            {
                                <th width="15px"></th>
                            }
                            <th>Status</th>
                            <th>URL</th>
                            <th>Typ</th>
                        </tr>
                        @if (Model.Content.Urls.Any())
                        {
                            var urls = Model.Content.Urls.OrderBy(u => u.Type);
                            foreach (var url in urls)
                            {
                                <tr>
                                    @if (Model.IsContentAdministrator)
                                    {
                                        <td>
                                            @if (url.Enabled && url.Type == UrlType.Alternative)
                                            {
                                                <a href="@Url.RouteUrl("ContentDetail", new {contentId = Model.Content.Id, action = "urls", detailId = url.Id})" title="URL entfernen">
                                                    <i class="fa fa-trash"></i>
                                                </a>
                                            }
                                        </td>
                                    }
                                    <td>
                                        @{ var status = url.Enabled ? "aktiv" : "überschreibbar"; }
                                        @status
                                    </td>
                                    <td>
                                        @url.Url
                                    </td>
                                    <td>
                                        @url.Type.GetDisplayName()
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="3">Für diesen Inhalt sind keine URLs festgelegt.</td>
                            </tr>
                        }
                    </table>
                </div>
            </div>
        </div>

        @if (Model.IsContentAdministrator)
        {
            using (Html.BeginRouteForm("ContentDetail", new { contentId = Model.Content.Id, action = "urls" }, FormMethod.Post, new { role = "form" }))
            {
                <div class="box box-primary">
                    <div class="box-header">
                        <button class="btn btn-success pull-right" type="submit">Speichern</button>

                        <h3 class="box-title">Neue URL hinzufügen</h3>
                    </div>
                    <div class="box-body">
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(c => c.ContentId)

                        <div class="form-group">
                            @Html.LabelFor(c => c.UrlName)
                            @Html.ValidationMessageFor(m => m.UrlName, "", new { @class = "text-danger" })
                            @Html.TextBoxFor(c => c.UrlName, new { @class = "form-control" })
                        </div>
                        <div class="checkbox">
                            <label>
                                @Html.CheckBoxFor(c => c.SetDefault)
                                Als Primär-Url setzen
                                @Html.ValidationMessageFor(m => m.SetDefault, "", new { @class = "text-danger" })
                            </label>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>
@section ContentSubMenu {
    @Html.Partial("~/Areas/mitarbeit/Views/Shared/_ContentMenuPartial.cshtml", new ContentMenuModel { Active = ContentMenuViewType.Urls, Id = Model.ContentId })
}