@*Copyright 2016 the pokefans authors. See copying.md for legal info.*@
@model Pokefans.Models.CommentsViewModel
@using Pokefans.Models
<div class="box-comments">
    <h3>Kommentar verfassen</h3>

    @* Antwortformular *@
    @if (User.Identity.IsAuthenticated)
    {
        <form action="@Url.Map("/v1/comments/add", "api")" class="media" data-role="rootReplyForm" data-context="@Model.Context" data-commentedobjectid="@Model.CommentedObjectId">
            <div class="media-body">
                <div class="form-group">
                    <textarea name="text" class="form-control" rows="3" placeholder="Erstelle einen Kommentar. Einfache BBCodes sind erlaubt."></textarea>
                </div>

                <input type="hidden" name="Context" value="@Convert.ChangeType(Model.Context, Model.Context.GetTypeCode())" />
                <input type="hidden" name="CommentedObjectId" value="@Model.CommentedObjectId" />
                <input type="hidden" name="parentId" value="0" />
                <input type="hidden" name="ajax" value="0" />

                <div class="alert alert-warning d-none" data-role="submitError"></div>

                <button class="btn btn-sm btn-primary" data-role="commentSubmit" type="submit">Kommentar abschicken</button>
            </div>
        </form>
    }
    else
    {
        <div class="alert alert-info">Du musst <a href="@Url.Map("anmeldung","user")">angemeldet sein</a>, um einen Kommentar zu schreiben. Noch kein Benutzerkonto? <a href="@Url.Map("registrieren","user")">Registriere dich jetzt kostenlos</a> und werde teil einer großen internationalen Community!</div>
    }

    <hr />

    <div data-role="commentWrapper" data-commentnesting="1" data-context="@Convert.ChangeType(Model.Context, Model.Context.GetTypeCode())" data-commentedobjectid="@Model.CommentedObjectId" data-parentid="0">
        @if (Model.Comments.Count > 0)
        {
            @CommentTree(Model);
        }
        else
        {
            <div class="alert alert-warning" data-role="noCommentsWarning">Es wurden noch keine Kommentare erstellt!</div>
        }
    </div>

    @* Template für neue Kommentare *@
    <div class="media d-none" data-role="commentTemplate">
        <div class="media-left">
            <img src="" data-role="miniAvatar" data-avatarurl="@Url.Map("user/avatare/", "files")" class="media-object" alt="Avatar" />
        </div>

        <div class="media-body">

            <div class="media-heading small text-muted">
                <a data-role="commentLink" href="">#</a>
                von <span data-role="commentAuthor"></span>
                am <time data-role="commentTime"></time>

                <span class="pull-right">
                    @if (Model.CanHideComment)
                    {
                        <a href="@Url.Map("v1/comments/hide/", "api")" data-commentid="" data-role="toggleHide" title="Kommentarinhalt verbergen"><i class="fa fa-fw fa-eye-slash"></i></a>
                    }
                    <a href="@Url.Map("v1/comments/delete/", "api")" data-commentid="" data-role="deleteComment" title="Kommentar und Antworten löschen"><i class="fa fa-fw fa-remove"></i></a>
                    <a href="#" data-commentid="" data-role="commentAnswer"><i class="fa fa-fw fa-reply"></i></a>
                </span>
            </div>

            <div data-role="commentText" data-commentid="-1"></div>
            <div data-role="replyForm" data-commentid="-1"></div>
            <div data-role="commentWrapper" data-commentnesting="1" data-context="-1" data-commentedobjectid="-1" data-parentid="-1"></div>
        </div>

        <div data-role="commentWrapper" data-commentnesting="0" data-context="-1" data-commentedobjectid="-1" data-parentid="-1"></div>
    </div>
</div>

@helper CommentTree(CommentsViewModel cvm)
    {
    foreach (var comment in cvm.Comments)
    {

        var avaurl = comment.AvatarUrl;

            <div class="media mt-3" id="@string.Format("k{0}", comment.CommentId)">
                <img src="@avaurl" class="mr-3 align-self-start" alt="Avatar" />
                <div class="media-body">

                    <div class="mb-1 small text-muted">
                        <a data-role="commentLink" href="@string.Format("#k{0}", comment.CommentId)">#</a>
                        von <span data-role="commentAuthor">@comment.Author</span>@*TODO: Link*@
                        am <time data-role="commentTime">@comment.SubmitTime.ToString("d.M.yyyy HH:mm")</time>

                        <span class="pull-right">
                            @if (Model.CanHideComment)
                            {
                                <a href="@Url.Map("v1/comments/hide/"+comment.CommentId, "api")" data-commentid="@comment.CommentId" data-role="toggleHide" title="Kommentarinhalt verbergen"><i class="fa fa-fw fa-eye-slash"></i></a>
                            }
                            @if (Model.CurrentUser != null && Model.Manager.CanDelete(Model.CurrentUser, comment))
                            {
                                <a href="@Url.Map("v1/comments/delete/"+comment.CommentId, "api")" data-commentid="@comment.CommentId" data-role="deleteComment" title="Kommentar und Antworten löschen"><i class="fa fa-fw fa-remove"></i></a>
                            }

                            <a href="#" data-commentid="@comment.CommentId" data-context="@Model.Context" data-commentedobjectid="@Model.CommentedObjectId" data-role="commentAnswer" title="Antwort schreiben"><i class="fa fa-fw fa-reply"></i></a>
                        </span>
                    </div>

                    <div data-role="commentText" data-commentid="@comment.CommentId">
                        @if (comment.DisplayPublic)
                    {
                        <text>@Html.Raw(comment.Text)</text>
                    }
                    else
                    {
                        <span class="text-muted">Der Inhalt dieses Kommentars wurde von der Moderation ausgeblendet.</span>
                    }
                    </div>

                    <div data-role="replyForm" data-commentid="@comment.CommentId"></div>

                    <div data-role="commentWrapper" data-commentnesting="1" data-context="@Convert.ChangeType(Model.Context, Model.Context.GetTypeCode())" data-commentedobjectid="@Model.CommentedObjectId" data-parentid="@comment.CommentId">
                        @*Sobald ein Kommentar auf der dritten Ebene oder höher ist, soll die Anzeige nicht weiter verschachtelt werden. *@
                        @if (Model.Level < 2)
                    {
                        @CommentTree(cvm.Descend(comment.Children));
                    }
                    </div>
                </div>
            </div>

            <div data-role="commentWrapper" data-commentnesting="0" data-context="@Convert.ChangeType(Model.Context, Model.Context.GetTypeCode())" data-commentedobjectid="@Model.CommentedObjectId" data-parentid="@comment.CommentId">
                @if (Model.Level >= 2)
        {
            CommentTree(cvm.Descend(comment.Children));
        }
            </div>
    }
}